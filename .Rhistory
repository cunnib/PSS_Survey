ylim((-1*bound), bound) + xlim((-1*bound), bound) +
# scale_x_discrete("2017 UW - Market", labs, labs, c(-1*bound), bound) +
# scale_y_discrete("2019 UW - Market", labs, labs, c(-1*bound), bound) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
geom_abline(linetype = "dashed", alpha = 0.3, color = "black") + theme_bw() +
ggtitle("Percentage difference between UW and Market Rates by Job Title -- 2017 vs 2019") +
guides(color=guide_legend(title="Job Category")) +
guides(size=guide_legend(title="Survey Sample Size")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
comp
head(comp)
#### plot.R ###
# Purpose: Visualize differences btw 2017 and 2019 by job class
# Author: Brandon Cunningham (brandon.cunningham.20@gmail.com)
#####################
library(data.table)
library(XML)
library(ggplot2)
setwd("C:/Users/brand/Documents/PSS_Survey/")
comp <- fread(paste0("data/comparison_17_19.csv"))
comp$title <- gsub("â???", "-", comp$title)
comp$title
comp <- fread(paste0("data/comparison_17_19.csv"))
comp$title
#### plot.R ###
# Purpose: Visualize differences btw 2017 and 2019 by job class
# Author: Brandon Cunningham (brandon.cunningham.20@gmail.com)
#####################
library(data.table)
library(XML)
library(ggplot2)
setwd("C:/Users/brand/Documents/PSS_Survey/")
comp <- fread(paste0("data/comparison_17_19.csv"))
comp$title <- gsub("â€“", "-", comp$title)
comp
categories <- fread("data/comparison_categories.csv")
categories
categories$y2012
categories$y2012 * 4
categories <- fread("data/comparison_categories.csv")
categories <- melt(categories, id.vars='category')
vategories
categories
#### pss_scrape.R ###
# Purpose: Download tables from PSS web page
# Author: Brandon Cunningham (brandon.cunningham.20@gmail.com)
#####################
library(data.table)
library(XML)
setwd("C:/Users/brand/Documents/PSS_Survey/")
pss19 <- readHTMLTable(readLines("https://hr.uw.edu/comp/professional-staff/2019-professional-staff-salary-survey/"))[2:8]
pss17 <- readHTMLTable(readLines("https://hr.uw.edu/comp/professional-staff/2017-professional-staff-salary-survey/"))
df <- pss19
for(i in 1:length(df)){ df[[i]] <- data.table(df[i][[1]]) }
###Salary by classification, table 4
t4new <- data.table()
t4 <- df[[4]]
##Split into sub tables
##First, identify blank rows between sub-tables
blanks <- c(0,(1:nrow(t4))[is.na(t4[,2])], nrow(t4))
#loop through each sub-table between two blank rows
for(r in 1:(length(blanks)-1)){
temp <- t4[(blanks[r]+1):(blanks[r+1]-1),] #subset table
#Read the job category -
#in the first row for most sub-tables, in the column names for the first sub-table
if(r==1){
temp[,category := names(temp)[3]]
} else {
temp[,category := temp[1,3]]
temp <- temp[2:nrow(temp),]
}
#omit the category percentages - we can get these from table 5 easier
if(r != length(blanks)-1) {temp <- temp[1:(nrow(temp)-1)]}
#R friendly column names
names(temp) <- c("job_family", "uw_job_codes_2019", "title",
"uw_ees_2019", "uw_market_50th_tcc_2019", "job_category")
t4new <- rbind(t4new,temp,fill=T)
}
titles19 <- copy(t4new)
##Table 5: uw-market_50th_tcc by job category
yrs <- c("y2012", "y2015", "y2017", "y2019")
t5 <- df[[5]]
t5 <- t5[2:nrow(t5)]
names(t5) <- c("category", yrs[1:(ncol(t5)-1)])
df <- pss17
for(i in 1:length(df)){ df[[i]] <- data.table(df[i][[1]]) }
###Salary by classification, table 4
t4new <- data.table()
t4 <- df[[4]]
##Split into sub tables
##First, identify blank rows between sub-tables
blanks <- c(0,(1:nrow(t4))[is.na(t4[,2])], nrow(t4))
#loop through each sub-table between two blank rows
for(r in 1:(length(blanks)-1)){
temp <- t4[(blanks[r]+1):(blanks[r+1]-1),] #subset table
#Read the job category -
#in the first row for most sub-tables, in the column names for the first sub-table
if(r==1){
temp[,category := names(temp)[3]]
} else {
temp[,category := temp[1,3]]
temp <- temp[2:nrow(temp),]
}
#omit the category percentages - we can get these from table 5 easier
if(r != length(blanks)-1) {temp <- temp[1:(nrow(temp)-1)]}
#R friendly column names
names(temp) <- c("job_family", "uw_job_codes_2017", "title",
"uw_ees_2017", "uw_market_50th_tcc_2017", "job_category")
t4new <- rbind(t4new,temp,fill=T)
}
titles17 <- copy(t4new)
comparison <- merge(titles17, titles19, by = c("title", "job_category",
"job_family"), all=T)
fwrite(comparison, paste0("data/comparison_17_19.csv"))
fwrite(t5, paste0("data/comparison_categories.csv"))
t5
compareVersion()
comparison
#### pss_scrape.R ###
# Purpose: Download tables from PSS web page
# Author: Brandon Cunningham (brandon.cunningham.20@gmail.com)
#####################
library(data.table)
library(XML)
setwd("C:/Users/brand/Documents/PSS_Survey/")
pss19 <- readHTMLTable(readLines("https://hr.uw.edu/comp/professional-staff/2019-professional-staff-salary-survey/"))[2:8]
pss17 <- readHTMLTable(readLines("https://hr.uw.edu/comp/professional-staff/2017-professional-staff-salary-survey/"))
df <- pss19
for(i in 1:length(df)){ df[[i]] <- data.table(df[i][[1]]) }
###Salary by classification, table 4
t4new <- data.table()
t4 <- df[[4]]
##Split into sub tables
##First, identify blank rows between sub-tables
blanks <- c(0,(1:nrow(t4))[is.na(t4[,2])], nrow(t4))
#loop through each sub-table between two blank rows
for(r in 1:(length(blanks)-1)){
temp <- t4[(blanks[r]+1):(blanks[r+1]-1),] #subset table
#Read the job category -
#in the first row for most sub-tables, in the column names for the first sub-table
if(r==1){
temp[,category := names(temp)[3]]
} else {
temp[,category := temp[1,3]]
temp <- temp[2:nrow(temp),]
}
#omit the category percentages - we can get these from table 5 easier
if(r != length(blanks)-1) {temp <- temp[1:(nrow(temp)-1)]}
#R friendly column names
names(temp) <- c("job_family", "uw_job_codes_2019", "title",
"uw_ees_2019", "uw_market_50th_tcc_2019", "job_category")
t4new <- rbind(t4new,temp,fill=T)
}
titles19 <- copy(t4new)
##Table 5: uw-market_50th_tcc by job category
yrs <- c("y2012", "y2015", "y2017", "y2019")
t5 <- df[[5]]
t5 <- t5[2:nrow(t5)]
names(t5) <- c("category", yrs[1:(ncol(t5)-1)])
df <- pss17
for(i in 1:length(df)){ df[[i]] <- data.table(df[i][[1]]) }
###Salary by classification, table 4
t4new <- data.table()
t4 <- df[[4]]
##Split into sub tables
##First, identify blank rows between sub-tables
blanks <- c(0,(1:nrow(t4))[is.na(t4[,2])], nrow(t4))
#loop through each sub-table between two blank rows
for(r in 1:(length(blanks)-1)){
temp <- t4[(blanks[r]+1):(blanks[r+1]-1),] #subset table
#Read the job category -
#in the first row for most sub-tables, in the column names for the first sub-table
if(r==1){
temp[,category := names(temp)[3]]
} else {
temp[,category := temp[1,3]]
temp <- temp[2:nrow(temp),]
}
#omit the category percentages - we can get these from table 5 easier
if(r != length(blanks)-1) {temp <- temp[1:(nrow(temp)-1)]}
#R friendly column names
names(temp) <- c("job_family", "uw_job_codes_2017", "title",
"uw_ees_2017", "uw_market_50th_tcc_2017", "job_category")
t4new <- rbind(t4new,temp,fill=T)
}
titles17 <- copy(t4new)
comparison <- merge(titles17, titles19, by = c("title", "job_category",
"job_family"), all=T)
comparison$title <- gsub("–", "-", comp$title)
fwrite(comparison, paste0("data/comparison_17_19.csv"))
fwrite(t5, paste0("data/comparison_categories.csv"))
comparison
comp <- fread(paste0("data/comparison_17_19.csv"))
comp
categories
categories <- fread("data/comparison_categories.csv")
categories <- melt(categories, id.vars='category')
categories$variable <- gsub("y", "", comp$variable)
# plot everything
ggplot(categories, aes(categories, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
categories <- fread("data/comparison_categories.csv")
categories <- melt(categories, id.vars='category')
categories
categories$variable <- gsub("y", "", categories$variable)
# plot everything
ggplot(categories, aes(categories, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
guides(fill=guide_legend(title="Survey Year")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(data = comp,
aes(x = uw_market_50th_tcc_2017, y = uw_market_50th_tcc_2019,
color = job_category, size = uw_ees_2019)) +
xlab("2017 UW - Market") + ylab("2019 UW - Market") +
ylim((-1*bound), bound) + xlim((-1*bound), bound) +
# scale_x_discrete("2017 UW - Market", labs, labs, c(-1*bound), bound) +
# scale_y_discrete("2019 UW - Market", labs, labs, c(-1*bound), bound) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
geom_abline(linetype = "dashed", alpha = 0.3, color = "black") + theme_bw() +
ggtitle("Percentage difference between UW and Market Rates by Job Title -- 2017 vs 2019") +
guides(color=guide_legend(title="Job Category")) +
guides(size=guide_legend(title="Survey Sample Size")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#### plot.R ###
# Purpose: Visualize differences btw 2017 and 2019 by job class
# Author: Brandon Cunningham (brandon.cunningham.20@gmail.com)
#####################
library(data.table)
library(XML)
library(ggplot2)
setwd("C:/Users/brand/Documents/PSS_Survey/")
comp <- fread(paste0("data/comparison_17_19.csv"))
comp$uw_market_50th_tcc_2017 <- gsub("-", "-", comp$uw_market_50th_tcc_2017)
comp$uw_market_50th_tcc_2019 <- gsub("-", "-", comp$uw_market_50th_tcc_2019)
comp$uw_market_50th_tcc_2017 <- gsub("%", "", comp$uw_market_50th_tcc_2017)
comp$uw_market_50th_tcc_2019 <- gsub("%", "", comp$uw_market_50th_tcc_2019)
comp[,uw_market_50th_tcc_2017 := as.numeric(as.character(uw_market_50th_tcc_2017))]
comp[,uw_market_50th_tcc_2019 := as.numeric(as.character(uw_market_50th_tcc_2019))]
bound <- max ( abs(min(comp$uw_market_50th_tcc_2017, na.rm=T)),
abs(min(comp$uw_market_50th_tcc_2019, na.rm=T)),
abs(max(comp$uw_market_50th_tcc_2017, na.rm=T)),
abs(max(comp$uw_market_50th_tcc_2019, na.rm=T)) )
lab = (bound %/% 10) * 10
labs <- seq(-1 * lab, lab, by = 5)
ggplot(data = comp,
aes(x = uw_market_50th_tcc_2017, y = uw_market_50th_tcc_2019,
color = job_category, size = uw_ees_2019)) +
xlab("2017 UW - Market") + ylab("2019 UW - Market") +
ylim((-1*bound), bound) + xlim((-1*bound), bound) +
# scale_x_discrete("2017 UW - Market", labs, labs, c(-1*bound), bound) +
# scale_y_discrete("2019 UW - Market", labs, labs, c(-1*bound), bound) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
geom_abline(linetype = "dashed", alpha = 0.3, color = "black") + theme_bw() +
ggtitle("Percentage difference between UW and Market Rates by Job Title -- 2017 vs 2019") +
guides(color=guide_legend(title="Job Category")) +
guides(size=guide_legend(title="Survey Sample Size")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(data = comp,
aes(x = uw_market_50th_tcc_2017, y = uw_market_50th_tcc_2019,
color = job_category, size = uw_ees_2019)) +
xlab("2017 UW - Market") + ylab("2019 UW - Market") +
ylim((-1*bound), bound) + xlim((-1*bound), bound) +
# scale_x_discrete("2017 UW - Market", labs, labs, c(-1*bound), bound) +
# scale_y_discrete("2019 UW - Market", labs, labs, c(-1*bound), bound) +
geom_point() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
geom_abline(linetype = "dashed", alpha = 0.3, color = "black") +
ggtitle("Percentage difference between UW and Market Rates by Job Title -- 2017 vs 2019") +
guides(color=guide_legend(title="Job Category")) +
guides(size=guide_legend(title="Survey Sample Size")) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
categories <- fread("data/comparison_categories.csv")
categories <- melt(categories, id.vars='category')
categories$variable <- gsub("y", "", categories$variable)
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
geom_hline(yintercept = 0) +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
geom_hline(yintercept = 0) +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
geom_text(aes(label=value), vjust=0) +
opts(axis.text.x=theme_blank(),
axis.ticks=theme_blank(),
axis.title.x=theme_blank(),
legend.title=theme_blank(),
axis.title.y=theme_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
geom_hline(yintercept = 0) +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
geom_text(aes(label=value), vjust=0) +
theme(axis.text.x=theme_blank(),
axis.ticks=theme_blank(),
axis.title.x=theme_blank(),
legend.title=theme_blank(),
axis.title.y=theme_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
geom_hline(yintercept = 0) +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
geom_text(aes(label=value), vjust=0) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
geom_hline(yintercept = 0) +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
geom_text(aes(label=value, fill = variable), vjust=0) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# plot everything
ggplot(categories, aes(category, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
xlab("Job Category") + ylab("Percantage Difference, UW - Market") +
ggtitle("Percentage difference between UW and Market Rates by Job Category") +
geom_hline(yintercept = 0) +
guides(fill=guide_legend(title="Survey Year")) + theme_bw() +
geom_text(aes(label=value, fill=variable), vjust=0) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
categories
categories <- fread("data/comparison_categories.csv")
categories
ggplot() +
# add a line segment that goes from men to women for each discipline
geom_segment(data = categories, aes(x = 1, xend = 2,
y = y2017,
yend = y2019,
group = category,
col = category),
size = 1.2) +
# set the colors
#scale_color_manual(values = c("#468189", "#9DBEBB"), guide = "none")  +
# remove all axis stuff
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
ggplot() +
# add a line segment that goes from men to women for each discipline
geom_segment(data = categories, aes(x = 1, xend = 2,
y = y2017,
yend = y2019,
group = category,
col = category),
size = 1.2) +
# set the colors
#scale_color_manual(values = c("#468189", "#9DBEBB"), guide = "none")  +
# remove all axis stuff
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
# add the label and success rate for each discipline next the men axis
geom_text(aes(x = 1 - 0.03,
y = y2017,
label = paste0(y2017, "%")),
col = "grey30", hjust = "right") +
# add the success rate next to each point on the women axis
geom_text(aes(x = 2 + 0.08,
y = success_rates_women,
label = paste0(y2017, "%")),
col = "grey30") +
# set the limits of the x-axis so that the labels are not cut off
scale_x_continuous(limits = c(0.5, 2.1))
categories
ggplot() +
# add a line segment that goes from men to women for each discipline
geom_segment(data = categories, aes(x = 1, xend = 2,
y = y2017,
yend = y2019,
group = category,
col = category),
size = 1.2) +
# set the colors
#scale_color_manual(values = c("#468189", "#9DBEBB"), guide = "none")  +
# remove all axis stuff
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
# add the label and success rate for each discipline next the men axis
geom_text(aes(x = 1 - 0.03,
y = y2017,
label = paste0(y2017, "%")),
col = "grey30", hjust = "right") +
# add the success rate next to each point on the women axis
geom_text(aes(x = 2 + 0.08,
y = y2019,
label = paste0(y2019, "%")),
col = "grey30") +
# set the limits of the x-axis so that the labels are not cut off
scale_x_continuous(limits = c(0.5, 2.1))
ggplot() +
# add a line segment that goes from men to women for each discipline
geom_segment(data = categories, aes(x = 1, xend = 2,
y = y2017,
yend = y2019,
group = category,
col = category),
size = 1.2) +
# set the colors
#scale_color_manual(values = c("#468189", "#9DBEBB"), guide = "none")  +
# remove all axis stuff
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
# add the label and success rate for each discipline next the men axis
geom_text(aes(x = 1 - 0.03,
y = y2017,
label = y2017),
col = "grey30", hjust = "right") +
# add the success rate next to each point on the women axis
geom_text(aes(x = 2 + 0.08,
y = y2019,
label = y2019),
col = "grey30") +
# set the limits of the x-axis so that the labels are not cut off
scale_x_continuous(limits = c(0.5, 2.1))
categories
ggplot() +
# add a line segment that goes from men to women for each discipline
geom_segment(data = categories, aes(x = 1, xend = 2,
y = y2017,
yend = y2019,
group = category,
col = category),
size = 1.2) +
# set the colors
#scale_color_manual(values = c("#468189", "#9DBEBB"), guide = "none")  +
# remove all axis stuff
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
# add the label and success rate for each discipline next the men axis
geom_text(aes(x = 1 - 0.03,
y = y2017,
label = category),
col = "grey30", hjust = "right") +
# add the success rate next to each point on the women axis
geom_text(aes(x = 2 + 0.08,
y = y2019,
label = category),
col = "grey30") +
# set the limits of the x-axis so that the labels are not cut off
scale_x_continuous(limits = c(0.5, 2.1))
ggplot() +
# add a line segment that goes from men to women for each discipline
geom_segment(data = categories, aes(x = 1, xend = 2,
y = y2017,
yend = y2019,
group = category,
col = category),
size = 1.2) +
# set the colors
#scale_color_manual(values = c("#468189", "#9DBEBB"), guide = "none")  +
# remove all axis stuff
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
# add the label and success rate for each discipline next the men axis
geom_text(data = categories, aes(x = 1 - 0.03,
y = y2017,
label = y2017),
col = "grey30", hjust = "right") +
# add the success rate next to each point on the women axis
geom_text(data = categories, aes(x = 2 + 0.08,
y = y2019,
label = y2019),
col = "grey30") +
# set the limits of the x-axis so that the labels are not cut off
scale_x_continuous(limits = c(0.5, 2.1))
